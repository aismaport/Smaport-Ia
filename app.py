import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
from openai import OpenAI
import io
import os

# ==============================
# üîê CARGA DE API KEY DESDE GITHUB SECRETS (variables de entorno)
# ==============================
api_key = os.getenv("OPENAI_API_KEY")

if not api_key:
    st.warning("‚ö†Ô∏è No se encontr√≥ la clave API. Aseg√∫rate de definir OPENAI_API_KEY como Secret en GitHub o en Streamlit Cloud.")

# ==============================
# üìò CONFIGURACI√ìN DE LA APP
# ==============================
st.markdown("""
    <div style="text-align: center; margin-bottom: 30px;">
        <h1 style="color:#4A90E2;">üìä Smaport IA</h1>
        <h3 style="color:gray;">Analista de negocio inteligente impulsado por IA</h3>
    </div>
""", unsafe_allow_html=True)

# ==============================
# üß≠ SIDEBAR
# ==============================
st.sidebar.header("Configuraci√≥n de an√°lisis")

MODEL_NAME = "gpt-5"  

st.sidebar.write("Ajusta los par√°metros antes de procesar los datos:")
st.sidebar.subheader("Opciones de visualizaci√≥n")
top_n_productos = st.sidebar.slider("Top N productos", 3, 20, 5)
std_multiplier = st.sidebar.slider(
    "Umbral de anomal√≠as (œÉ)", 1.5, 4.0, 2.0, 0.1,
    help="Cu√°ntas desviaciones est√°ndar -> marcar anomal√≠a"
)
st.sidebar.markdown("---")
st.sidebar.markdown("<p style='text-align:center; color:gray;'>Smaport IA ¬© 2025</p>", unsafe_allow_html=True)
# ==============================
# üîß FUNCIONES AUXILIARES
# ==============================
def find_column(df, possible_names):
    for col in df.columns:
        if any(name.lower() in col.lower() for name in possible_names):
            return col
    return None

def clean_numeric(series):
    """Convierte texto con ‚Ç¨, %, o comas a n√∫mero."""
    return (
        series.astype(str)
        .str.replace(r"[‚Ç¨$,%]", "", regex=True)
        .str.replace(".", "", regex=False)
        .str.replace(",", ".", regex=False)
        .str.strip()
        .replace("", pd.NA)
        .pipe(pd.to_numeric, errors="coerce")
    )

def format_value(val, currency=False):
    if pd.isna(val):
        return "N/A"
    if currency:
        return f"‚Ç¨ {val:,.2f}".replace(",", "_").replace(".", ",").replace("_", " ")
    return f"{val:,.0f}".replace(",", " ")

# ==============================
# üì§ SUBIDA DE ARCHIVO
# ==============================
archivo = st.file_uploader("üìÇ Sube tu archivo CSV o Excel (ventas, inventario, etc.)", type=["csv", "xlsx"])

if archivo:
    try:
        # === CARGA ROBUSTA ===
        if archivo.name.endswith(".csv"):
            try:
                df = pd.read_csv(archivo, encoding="utf-8", sep=None, engine="python")
            except Exception:
                archivo.seek(0)
                df = pd.read_csv(archivo, encoding="latin1", sep=None, engine="python")
        else:
            df = pd.read_excel(archivo, engine="openpyxl")

        if df.empty:
            st.error("‚ùå El archivo est√° vac√≠o o no contiene datos v√°lidos.")
            st.stop()

        # === LIMPIEZA B√ÅSICA ===
        df = df.replace([float("inf"), float("-inf")], pd.NA).dropna(how="all")
        df.columns = df.columns.map(str).str.strip()
        df = df.loc[:, ~df.columns.str.contains("^Unnamed", na=False)]

        # === DETECCI√ìN AUTOM√ÅTICA DE COLUMNAS ===
        date_col = find_column(df, ["fecha", "date"])
        revenue_col = find_column(df, ["ingresos", "ventas", "facturado", "importe", "revenue"])
        cost_col = find_column(df, ["coste", "gasto", "costo", "cost"])
        product_col = find_column(df, ["producto", "concepto", "item", "descripci√≥n", "product"])
        units_col = find_column(df, ["unidades", "cantidad", "qty", "units"])

        # === CONVERSI√ìN DE TIPOS ===
        if revenue_col:
            df[revenue_col] = clean_numeric(df[revenue_col])
        if cost_col:
            df[cost_col] = clean_numeric(df[cost_col])
        if units_col:
            df[units_col] = clean_numeric(df[units_col]).astype("Int64", errors="ignore")
        if date_col:
            df[date_col] = pd.to_datetime(df[date_col], errors="coerce")
            df = df.dropna(subset=[date_col])

        # ==============================
        # üëÄ VISTA PREVIA
        # ==============================
        st.subheader("üìÑ Vista previa de los datos (limpios)")
        st.dataframe(df.head(40))
        st.markdown("""
    <div style="background-color:#F9FAFB; padding:20px; border-radius:10px; margin-top:20px;">
        <h4>üìÑ Vista previa de los datos (limpios)</h4>
    </div>
""", unsafe_allow_html=True)
st.dataframe(df.head(40))
        # ==============================
        # üìä RESUMEN EJECUTIVO
        # ==============================
        st.subheader("üìä Resumen ejecutivo")

        ingresos = df[revenue_col].sum() if revenue_col and revenue_col in df.columns else 0
        coste = df[cost_col].sum() if cost_col and cost_col in df.columns else 0
        beneficio = ingresos - coste
        margen = (beneficio / ingresos * 100) if ingresos else 0
        unidades = int(df[units_col].sum()) if units_col and units_col in df.columns else None

        col1, col2, col3, col4 = st.columns(4)
        col1.metric("üí∞ Ingresos totales", format_value(ingresos, True))
        col2.metric("üìâ Costes totales", format_value(coste, True))
        col3.metric("üìà Margen (%)", f"{margen:.2f}%")
        col4.metric("üì¶ Unidades vendidas", format_value(unidades or 0))

        if date_col:
            st.info(f"**Periodo analizado:** {df[date_col].min().date()} ‚Üí {df[date_col].max().date()}")

        # ==============================
        # üèÜ TOP PRODUCTOS
        # ==============================
        if product_col and revenue_col:
            st.subheader(f"üèÜ Top {top_n_productos} productos por ingresos")
            top_prod = (
                df.groupby(product_col)[revenue_col]
                .sum()
                .sort_values(ascending=False)
                .head(top_n_productos)
            )
            st.bar_chart(top_prod)

        # ==============================
        # üìà RESUMEN GR√ÅFICO
        # ==============================
        st.subheader("üìà Resumen gr√°fico")

        # Pie chart
        if product_col and revenue_col:
            try:
                pie_df = (
                    df.groupby(product_col)[revenue_col]
                    .sum()
                    .sort_values(ascending=False)
                    .head(top_n_productos)
                ).reset_index()
                pie_df['porcentaje'] = pie_df[revenue_col] / pie_df[revenue_col].sum() * 100
                fig_pie = px.pie(pie_df, names=product_col, values=revenue_col,
                                 title=f"Participaci√≥n de ingresos (Top {top_n_productos})",
                                 hover_data={'porcentaje':':.2f'})
                st.plotly_chart(fig_pie, use_container_width=True)
            except Exception as e:
                st.warning(f"No se pudo generar el gr√°fico de participaci√≥n por producto: {e}")

        # Margen en el tiempo
        if date_col and revenue_col and cost_col and cost_col in df.columns:
            try:
                st.subheader("üìâ Evoluci√≥n del margen (por periodo)")
                df_margin = df[[date_col, revenue_col, cost_col]].dropna()
                df_margin = df_margin.set_index(date_col).resample("M").sum().reset_index()
                df_margin['margen_abs'] = df_margin[revenue_col] - df_margin[cost_col]
                df_margin['margen_pct'] = df_margin['margen_abs'] / df_margin[revenue_col] * 100
                df_margin['margen_pct'] = df_margin['margen_pct'].fillna(0)
                fig_margin = px.line(df_margin, x=date_col, y='margen_pct',
                                     title="Margen % por periodo (mensual)",
                                     labels={'margen_pct':'Margen (%)', date_col:'Fecha'})
                fig_margin.update_traces(mode='lines+markers')
                st.plotly_chart(fig_margin, use_container_width=True)
            except Exception as e:
                st.warning(f"No se pudo generar el gr√°fico del margen: {e}")

        # Evoluci√≥n de ingresos
        if date_col and revenue_col:
            st.subheader("‚è≥ Evoluci√≥n de ingresos (resample din√°mico)")
            time_range = df[date_col].max() - df[date_col].min()
            if time_range.days < 90:
                resample_rule = 'D'
            elif time_range.days < 365 * 2:
                resample_rule = 'M'
            else:
                resample_rule = 'Q'

            df_temp = (
                df[[date_col, revenue_col]]
                .dropna()
                .set_index(date_col)
                .resample(resample_rule)
                .sum()
            )
            st.line_chart(df_temp)

        # ==============================
        # ‚ö†Ô∏è DETECCI√ìN DE ANOMAL√çAS
        # ==============================
        if revenue_col:
            data = df[revenue_col].dropna()
            if len(data) > 2:
                mean, std = data.mean(), data.std()
                outliers = df[(data > mean + std_multiplier * std) | (data < mean - std_multiplier * std)]
                if not outliers.empty:
                    st.subheader("‚ö†Ô∏è Anomal√≠as detectadas")
                    cols_show = [c for c in [date_col, product_col, revenue_col] if c and c in outliers.columns]
                    st.dataframe(outliers[cols_show].head(50))

        # ==============================
        # ü§ñ INFORME DE IA (GPT-5)
        # ==============================
        if api_key and st.button("ü§ñ Generar informe con IA (GPT-5)"):
            try:
                client = OpenAI(api_key=api_key)
                resumen = df.describe(include="all").to_string()
                muestra = df.head(50).to_string()
                prompt = f"""
                Eres un analista de datos experto. Analiza la siguiente informaci√≥n de negocio:

                - Detecta tendencias y estacionalidades.
                - Identifica productos o periodos m√°s rentables.
                - Se√±ala posibles riesgos o anomal√≠as.
                - Prop√≥n 3 recomendaciones concretas para mejorar ventas o eficiencia.

                Resumen estad√≠stico:
                {resumen}

                Muestra:
                {muestra}
                """
                with st.spinner("Analizando con GPT-5..."):
                    response = client.chat.completions.create(
                        model=MODEL_NAME,
                        messages=[{"role": "user", "content": prompt}],
                    )
                    analysis = response.choices[0].message.content

                st.subheader("üßæ Informe de IA")
                st.markdown(analysis)
                st.download_button(
                    "üì• Descargar informe (TXT)",
                    data=analysis.encode("utf-8"),
                    file_name="informe_smaport_IA.txt",
                    mime="text/plain",
                )

            except Exception as e:
                st.error(f"‚ùå Error al conectar con OpenAI: {e}")

    except Exception as e:
        st.error(f"‚ùå Error al procesar el archivo: {e}")

# ==============================
# ü™∂ FOOTER ‚Äî CR√âDITO DISCRETO
# ==============================
st.markdown(
    """
    <hr style="margin-top: 50px; margin-bottom: 10px;">
    <div style="text-align:center; color:gray; font-size: 14px;">
        Desarrollado por <strong>Smaport IA</strong>
    </div>
    """,
    unsafe_allow_html=True
)
